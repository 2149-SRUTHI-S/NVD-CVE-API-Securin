// By Sruthi Sivasankararaj
   
var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');

var app = express();

const myButton = document.getElementById('fetch');
myButton.addEventListener('click', fetchInfo);

const connectToDatabase = require('./mongodb/connect');

async function fetchInfo() {
    try {
        // Connect to the MongoDB database
        const collection = await connectToDatabase();

        // Fetch data from the CVE API
        const response = await fetch('https://services.nvd.nist.gov/rest/json/cves/2.0');
        const cveData = await response.json();

        // Store CVE information in the database
        await collection.insertMany(cveData.vulnerabilities);
        console.log('CVE information stored in MongoDB');
    } catch (err) {
        console.error('Error fetching and storing CVE information:', err);
    }
}


function displayUi(cve_data) {
  const container = document.getElementById('container');
  container.innerHTML = ''; // Clear previous data

  cve_data.vulnerabilities.forEach(vulnerability => {
      const cveId = vulnerability.cve.id;
      const cveYear = cveId.split('-')[1]; // Extracting year from CVE ID

      const cveDiv = document.createElement('div');
      cveDiv.classList.add('cve-item');

      const cveIdPara = document.createElement('p');
      cveIdPara.textContent = `CVE ID: ${cveId}`;

      const cveYearPara = document.createElement('p');
      cveYearPara.textContent = `CVE Year: ${cveYear}`;

      // Score information might not be available in the provided API response
      const cveScorePara = document.createElement('p');
      cveScorePara.textContent = 'CVE Score: Not available';

      cveDiv.appendChild(cveIdPara);
      cveDiv.appendChild(cveYearPara);
      cveDiv.appendChild(cveScorePara);

      container.appendChild(cveDiv);
  });
}

displayUi()

// engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/users', usersRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
